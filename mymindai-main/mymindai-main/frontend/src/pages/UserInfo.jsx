import React, { useState, useEffect } from "react";
import { Form, Input, Select, Button, message } from "antd";
import { updateUserInfo } from '../store/user';

const { Option } = Select;

const questions = [
  {
    key: "name",
    label: "–ö–∞–∫ –º–Ω–µ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
    type: "input",
  },
  {
    key: "communication_style",
    label: "–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
    type: "select",
    options: ["–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–°—Ç—Ä–∞—Ç–µ–≥", "–¢—Ä–µ–Ω–µ—Ä", "–ü–∞—Ä—Ç–Ω—ë—Ä"],
  },
  {
    key: "focus",
    label: "üìù–ù–∞ —á—ë–º —Ç—ã —Å–µ–π—á–∞—Å –¥–µ—Ä–∂–∏—à—å —Ñ–æ–∫—É—Å?",
    type: "select",
    options: [
      "–†–∞–±–æ—Ç–∞/–±–∏–∑–Ω–µ—Å", "–°–µ–º—å—è", "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "–û—Å–≤–æ–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤", "–°–ø–æ—Ä—Ç"
    ],
  },
  {
    key: "task_put_off",
    label: "üìù–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—à—å?",
    type: "select",
    options: [
      "–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ", "–î–æ–¥–µ–ª–∞—Ç—å –Ω–∞—á–∞—Ç–æ–µ", "–°–µ—Å—Ç—å –∏ –ø–æ–¥—É–º–∞—Ç—å", "–†–∞–∑–≥–æ–≤–æ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é –º–µ—Å—è—Ü–∞–º–∏", "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
    ],
  },
  {
    key: "important_now",
    label: "üéØ–ß—Ç–æ –¥–ª—è —Ç–µ–±—è —Å–µ–π—á–∞—Å –≥–ª–∞–≤–Ω–æ–µ?",
    type: "select",
    options: [
      "–†–æ—Å—Ç –≤ –¥–æ—Ö–æ–¥–∞—Ö",
      "–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç",
      "–ü–æ–∏—Å–∫ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —Å—á–∞—Å—Ç—å—è",
      "–ò–∑–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –Ω–µ –Ω—É–∂–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫",
      "–ü–æ–≤—ã—Å–∏—Ç—å —Ä–∏—Ç–º –∂–∏–∑–Ω–∏",
      "–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤",
      "–£–ª—É—á—à–∏—Ç—å —Å–µ–±—è –∫–∞–∫ –ª–∏—á–Ω–æ—Å—Ç—å",
    ],
  },
  {
    key: "assistant_goals",
    label:
      "ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç",
    type: "select",
    options: [
      "–õ–∏—á–Ω—ã–π —Ä–æ—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
      "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º",
      "–ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
      "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
      "–í–µ–¥–µ–Ω–∏–µ –∏–¥–µ–π –∏ –∑–∞–º–µ—Ç–æ–∫",
    ],
  },
  {
    key: "timezone",
    label: "üåç –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è?",
    type: "input",
  },
  {
    key: "work_schedule",
    label:
      "‚è∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–Ω—è –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?",
    type: "input",
  },
  {
    key: "target_improvement",
    label: "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–º –º–µ—Å—è—Ü–µ?",
    type: "select",
    options: [
      "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è",
      "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ñ–æ–∫—É—Å",
      "–û–±—É—á–µ–Ω–∏–µ –∏ —Ä–æ—Å—Ç",
      "–ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏",
      "–ë–∞–ª–∞–Ω—Å –∏ –æ—Ç–¥—ã—Ö",
    ],
  },
];

const AntForm = ({ userInfo, userID, onUpdate }) => {

  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [messageApi, contextHolder] = message.useMessage();

  const onFinish = async (values) => {
    setLoading(true);
    try {
      const response = await updateUserInfo(values, userID);
      console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      
      if (!response) {
        throw new Error("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
      }

      messageApi.success("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
      onUpdate(values);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
      messageApi.error("–û—à–∏–±–∫–∞: " + (error.message || "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"));
    } finally {
      console.log('Setting loading to false');
      setTimeout(function(){
        setLoading(false);
      }, 1500);
    }
  };

  const onFinishFailed = (errorInfo) => {
    console.log('Form validation failed:', errorInfo);
    messageApi.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π");
  };

  if (!userInfo) {
    return (
      <div style={{ textAlign: "center", padding: "24px" }}>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</p>
      </div>
    );
  }

  return (
    <>
      {contextHolder}
      <div style={{ maxWidth: 600, margin: "0 auto", rowGap: 15}}>
        <Form
          form={form}
          className="formUserInfo"
          layout="vertical"
          onFinish={onFinish}
          onFinishFailed={onFinishFailed}
          initialValues={{
            name: userInfo.name,
            communication_style: userInfo.communication_style,
            focus: userInfo.focus,
            task_put_off: userInfo.task_put_off,
            important_now: userInfo.important_now,
            assistant_goals: userInfo.assistant_goals,
            timezone: userInfo.timezone,
            work_schedule: userInfo.work_schedule,
            target_improvement: userInfo.target_improvement,
          }}
        >
          {questions.map((item) => (
            <Form.Item
              key={item.key}
              name={item.key}
              label={<span style={{ fontFamily: "inherit", whiteSpace: "pre-wrap" }}>{item.label}</span>}
              rules={[{ required: true, message: "–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è" }]}
            >
              {item.type === "input" ? (
                <Input style={{ height: 50}} placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç" />
              ) : (
                <Select style={{ height: 50}} placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç">
                  {item.options.map((option) => (
                    <Option key={option} value={option}>
                      {option}
                    </Option>
                  ))}
                </Select>
              )}
            </Form.Item>
          ))}

          <Form.Item>
            <Button style={{ height: 50}} type="primary" htmlType="submit" loading={loading} block>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </Form.Item>
        </Form>
      </div>
    </>
  );
};

export default AntForm;